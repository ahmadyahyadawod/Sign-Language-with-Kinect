//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;

using CURELab.SignLanguage.RecognitionSystem.DataStorage;

namespace CURELab.SignLanguage.RecognitionSystem
{
    public class GestureModule : VisualFeatureModule
    {

        public GestureModule(RecognitionController recognitionController) : base(recognitionController) { }

        public void OnNewFrameDataReady(Object sender, EventArgs args)
        {
            DataTransferEventArgs arg = (DataTransferEventArgs)args;
            //Console.WriteLine("gesture current frame: " + arg.m_data +
            //                  "  x=" + m_dataWarehouse.GetPlayer1CurrentPosition().X.ToString("f")+
            //                  "  y=" + m_dataWarehouse.GetPlayer1CurrentPosition().Y.ToString("f")+
            //                  "  z=" + m_dataWarehouse.GetPlayer1CurrentPosition().Z.ToString("f"));

        }

        public void OnDataTransfer(Object sender, EventArgs args)
        {
            DataTransferEventArgs arg;
            try
            {
                arg = (DataTransferEventArgs)args;
            }
            catch (Exception)
            {

                throw;
            }
            if (sender is DataWarehouse && arg.m_data is SegmentationData)
            {
                SegmentationData data = (SegmentationData)arg.m_data;
                List<Vector3> list = m_dataWarehouse.GetPlayer1PositionBetweenFrames(data.startFrame, data.endFrame);
                if (data.reliebility >= 0.8)
                {
                    recognizeGesture(list);
                }
            }
        }

        private void recognizeGesture(List<Vector3> positions)
        {
            Vector3 diff = positions[positions.Count - 1] - positions[0];
            if (Math.Abs(diff.X) > Math.Abs(diff.Y) && Math.Abs(diff.X) > Math.Abs(diff.Z))
            {
                if (diff.X > 0)
                {
                    Console.WriteLine("moving->right");
                }
                else
                {
                    Console.WriteLine("moving->left");

                }
            }
            else if (Math.Abs(diff.Y) > Math.Abs(diff.Z))
            {
                if (diff.Y > 0)
                {
                    Console.WriteLine("moving->up");
                }
                else
                {
                    Console.WriteLine("moving->down");
                }
            }
            else
            {
                if (diff.Z > 0)
                {
                    Console.WriteLine("moving->away");
                }
                else
                {
                    Console.WriteLine("moving->near");
                }
            }

        }

    } 
}

